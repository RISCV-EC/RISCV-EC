#*****************************************************************************************
# Vivado (TM) v2022.2 (64-bit)
#
# rv32i_p.tcl: Tcl script for re-creating project 'rv32i_p'
#
# Generated by Vivado on Tue Oct 17 18:40:40 -0700 2023
# IP Build 3669848 on Fri Oct 14 08:30:02 MDT 2022
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (rv32i_p.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rv32i_p/rv32i_p.srcs/utils_1/imports/synth_1/design_1_wrapper.dcp"
#
# 3. The following remote source files that were added to the original project:-
#
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/alu.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/cont.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/generic_muc.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/mux_c.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/sign_oe.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/slicer.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/sum.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/unidor.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/prog_m.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/sign_e.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/data_m.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/mux32.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/CU.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/reg_b.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/mux2_1.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/mux_4b.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/one.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/p.vhd"
#    "C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/constraints/PYNQ-Z1_C.xdc"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
 "[file normalize "$origin_dir/rv32i_p/rv32i_p.srcs/utils_1/imports/synth_1/design_1_wrapper.dcp"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find local file $ifile "
      set status false
    }
  }

  set files [list \
 "[file normalize "$origin_dir/rtl/alu.vhd"]"\
 "[file normalize "$origin_dir/rtl/cont.vhd"]"\
 "[file normalize "$origin_dir/rtl/generic_muc.vhd"]"\
 "[file normalize "$origin_dir/rtl/mux_c.vhd"]"\
 "[file normalize "$origin_dir/rtl/sign_oe.vhd"]"\
 "[file normalize "$origin_dir/rtl/slicer.vhd"]"\
 "[file normalize "$origin_dir/rtl/sum.vhd"]"\
 "[file normalize "$origin_dir/rtl/unidor.vhd"]"\
 "[file normalize "$origin_dir/rtl/prog_m.vhd"]"\
 "[file normalize "$origin_dir/rtl/sign_e.vhd"]"\
 "[file normalize "$origin_dir/rtl/data_m.vhd"]"\
 "[file normalize "$origin_dir/rtl/mux32.vhd"]"\
 "[file normalize "$origin_dir/rtl/CU.vhd"]"\
 "[file normalize "$origin_dir/rtl/reg_b.vhd"]"\
 "[file normalize "$origin_dir/rtl/mux2_1.vhd"]"\
 "[file normalize "$origin_dir/rtl/mux_4b.vhd"]"\
 "[file normalize "$origin_dir/rtl/one.vhd"]"\
 "[file normalize "$origin_dir/rtl/p.vhd"]"\
 "[file normalize "$origin_dir/constraints/PYNQ-Z1_C.xdc"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "rv32i_p"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "rv32i_p.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/rv32i_p"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7z020clg400-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "www.digilentinc.com:pynq-z1:part0:1.0" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_resource_estimation" -value "0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "platform.board_id" -value "pynq-z1" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "sim_compile_state" -value "1" -objects $obj
set_property -name "target_language" -value "VHDL" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "2" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "2" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "2" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "2" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "2" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "2" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "1" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/rtl/alu.vhd"] \
 [file normalize "${origin_dir}/rtl/cont.vhd"] \
 [file normalize "${origin_dir}/rtl/generic_muc.vhd"] \
 [file normalize "${origin_dir}/rtl/mux_c.vhd"] \
 [file normalize "${origin_dir}/rtl/sign_oe.vhd"] \
 [file normalize "${origin_dir}/rtl/slicer.vhd"] \
 [file normalize "${origin_dir}/rtl/sum.vhd"] \
 [file normalize "${origin_dir}/rtl/unidor.vhd"] \
 [file normalize "${origin_dir}/rtl/prog_m.vhd"] \
 [file normalize "${origin_dir}/rtl/sign_e.vhd"] \
 [file normalize "${origin_dir}/rtl/data_m.vhd"] \
 [file normalize "${origin_dir}/rtl/mux32.vhd"] \
 [file normalize "${origin_dir}/rtl/CU.vhd"] \
 [file normalize "${origin_dir}/rtl/reg_b.vhd"] \
 [file normalize "${origin_dir}/rtl/mux2_1.vhd"] \
 [file normalize "${origin_dir}/rtl/mux_4b.vhd"] \
 [file normalize "${origin_dir}/rtl/one.vhd"] \
 [file normalize "${origin_dir}/rtl/p.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/rtl/alu.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/cont.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/generic_muc.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/mux_c.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/sign_oe.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/slicer.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/sum.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/unidor.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/prog_m.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/sign_e.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/data_m.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/mux32.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/CU.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/reg_b.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/rtl/mux2_1.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "used_in" -value "simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "$origin_dir/rtl/mux_4b.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "used_in" -value "simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "$origin_dir/rtl/one.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "used_in" -value "simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "$origin_dir/rtl/p.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "used_in" -value "simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "dataflow_viewer_settings" -value "min_width=16" -objects $obj
set_property -name "top" -value "design_1_wrapper" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/constraints/PYNQ-Z1_C.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/constraints/PYNQ-Z1_C.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_constrs_file" -value "[file normalize "$origin_dir/constraints/PYNQ-Z1_C.xdc"]" -objects $obj
set_property -name "target_ucf" -value "[file normalize "$origin_dir/constraints/PYNQ-Z1_C.xdc"]" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "design_1_wrapper" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/rv32i_p/rv32i_p.srcs/utils_1/imports/synth_1/design_1_wrapper.dcp" ]\
]
set imported_files [import_files -fileset utils_1 $files]

# Set 'utils_1' fileset file properties for remote files
# None

# Set 'utils_1' fileset file properties for local files
set file "synth_1/design_1_wrapper.dcp"
set file_obj [get_files -of_objects [get_filesets utils_1] [list "*$file"]]
set_property -name "netlist_only" -value "0" -objects $file_obj


# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added
if { [get_files alu.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/alu.vhd
}
if { [get_files cont.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/cont.vhd
}
if { [get_files generic_muc.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/generic_muc.vhd
}
if { [get_files mux_c.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/mux_c.vhd
}
if { [get_files sign_oe.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/sign_oe.vhd
}
if { [get_files slicer.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/slicer.vhd
}
if { [get_files sum.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/sum.vhd
}
if { [get_files unidor.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/unidor.vhd
}
if { [get_files prog_m.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/prog_m.vhd
}
if { [get_files sign_e.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/sign_e.vhd
}
if { [get_files generic_muc.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/generic_muc.vhd
}
if { [get_files data_m.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/data_m.vhd
}
if { [get_files generic_muc.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/generic_muc.vhd
}
if { [get_files mux32.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/mux32.vhd
}
if { [get_files CU.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/CU.vhd
}
if { [get_files reg_b.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/giggi/OneDrive/Documentos/desarrollo/rv32i/rtl/reg_b.vhd
}


# Proc to create BD design_1
proc cr_bd_design_1 { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# CU, alu, cont, data_m, gen_mux, gen_mux, gen_mux, mux32, mux_c, prog_m, reg_b, sign_e, sign_oe, slicer, sum, unidor



  # CHANGE DESIGN NAME HERE
  set design_name design_1

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  CU\
  alu\
  cont\
  data_m\
  gen_mux\
  gen_mux\
  gen_mux\
  mux32\
  mux_c\
  prog_m\
  reg_b\
  sign_e\
  sign_oe\
  slicer\
  sum\
  unidor\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set out_test [ create_bd_port -dir O out_test ]
  set sys_clk [ create_bd_port -dir I sys_clk ]

  # Create instance: CU_0, and set properties
  set block_name CU
  set block_cell_name CU_0
  if { [catch {set CU_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $CU_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: alu_0, and set properties
  set block_name alu
  set block_cell_name alu_0
  if { [catch {set alu_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $alu_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: cont_0, and set properties
  set block_name cont
  set block_cell_name cont_0
  if { [catch {set cont_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $cont_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: data_m_1, and set properties
  set block_name data_m
  set block_cell_name data_m_1
  if { [catch {set data_m_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_m_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: gen_mux_0, and set properties
  set block_name gen_mux
  set block_cell_name gen_mux_0
  if { [catch {set gen_mux_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $gen_mux_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property CONFIG.data_width {4} $gen_mux_0


  # Create instance: gen_mux_1, and set properties
  set block_name gen_mux
  set block_cell_name gen_mux_1
  if { [catch {set gen_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $gen_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property CONFIG.data_width {31} $gen_mux_1


  # Create instance: gen_mux_2, and set properties
  set block_name gen_mux
  set block_cell_name gen_mux_2
  if { [catch {set gen_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $gen_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property CONFIG.data_width {31} $gen_mux_2


  # Create instance: mux32_0, and set properties
  set block_name mux32
  set block_cell_name mux32_0
  if { [catch {set mux32_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mux32_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mux_c_0, and set properties
  set block_name mux_c
  set block_cell_name mux_c_0
  if { [catch {set mux_c_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mux_c_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: prog_m_0, and set properties
  set block_name prog_m
  set block_cell_name prog_m_0
  if { [catch {set prog_m_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $prog_m_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: reg_b_0, and set properties
  set block_name reg_b
  set block_cell_name reg_b_0
  if { [catch {set reg_b_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $reg_b_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: sign_e_0, and set properties
  set block_name sign_e
  set block_cell_name sign_e_0
  if { [catch {set sign_e_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sign_e_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: sign_oe_0, and set properties
  set block_name sign_oe
  set block_cell_name sign_oe_0
  if { [catch {set sign_oe_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sign_oe_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: slicer_0, and set properties
  set block_name slicer
  set block_cell_name slicer_0
  if { [catch {set slicer_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $slicer_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: sum_0, and set properties
  set block_name sum
  set block_cell_name sum_0
  if { [catch {set sum_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sum_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: unidor_0, and set properties
  set block_name unidor
  set block_cell_name unidor_0
  if { [catch {set unidor_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $unidor_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net CU_0_alu2reg [get_bd_pins CU_0/alu2reg] [get_bd_pins gen_mux_2/cont]
  connect_bd_net -net CU_0_alu_op [get_bd_pins CU_0/alu_op] [get_bd_pins alu_0/opcode]
  connect_bd_net -net CU_0_alu_scr [get_bd_pins CU_0/alu_scr] [get_bd_pins gen_mux_1/cont]
  connect_bd_net -net CU_0_ci_en [get_bd_pins CU_0/ci_en] [get_bd_pins mux_c_0/en]
  connect_bd_net -net CU_0_imm_rd [get_bd_pins CU_0/imm_rd] [get_bd_pins gen_mux_0/cont]
  connect_bd_net -net CU_0_men [get_bd_pins CU_0/men] [get_bd_pins mux32_0/c]
  connect_bd_net -net CU_0_wem [get_bd_pins CU_0/wem] [get_bd_pins data_m_1/we]
  connect_bd_net -net CU_0_wer [get_bd_pins CU_0/wer] [get_bd_pins reg_b_0/we]
  connect_bd_net -net Net [get_bd_ports sys_clk] [get_bd_pins cont_0/clk] [get_bd_pins data_m_1/clk] [get_bd_pins reg_b_0/clk]
  connect_bd_net -net alu_0_alu_sal [get_bd_pins alu_0/alu_sal] [get_bd_pins gen_mux_2/b] [get_bd_pins mux32_0/a] [get_bd_pins slicer_0/a]
  connect_bd_net -net cont_0_sal [get_bd_pins cont_0/sal] [get_bd_pins prog_m_0/a] [get_bd_pins sum_0/b]
  connect_bd_net -net data_m_1_dout [get_bd_pins data_m_1/dout] [get_bd_pins gen_mux_2/a]
  connect_bd_net -net gen_mux_0_sal [get_bd_pins gen_mux_0/sal] [get_bd_pins unidor_0/a2]
  connect_bd_net -net gen_mux_1_sal [get_bd_pins alu_0/a1] [get_bd_pins gen_mux_1/sal]
  connect_bd_net -net gen_mux_2_sal [get_bd_pins gen_mux_2/sal] [get_bd_pins reg_b_0/d1]
  connect_bd_net -net mux32_0_sal [get_bd_pins data_m_1/a] [get_bd_pins mux32_0/sal]
  connect_bd_net -net mux_c_0_sal [get_bd_pins mux_c_0/sal] [get_bd_pins sum_0/a]
  connect_bd_net -net prog_m_0_func3 [get_bd_pins CU_0/func3] [get_bd_pins prog_m_0/func3]
  connect_bd_net -net prog_m_0_funct7 [get_bd_pins CU_0/func7] [get_bd_pins prog_m_0/funct7] [get_bd_pins sign_oe_0/i1] [get_bd_pins unidor_0/a1]
  connect_bd_net -net prog_m_0_opcode [get_bd_pins CU_0/opcode] [get_bd_pins prog_m_0/opcode]
  connect_bd_net -net prog_m_0_rd [get_bd_pins gen_mux_0/b] [get_bd_pins prog_m_0/rd] [get_bd_pins reg_b_0/ad] [get_bd_pins sign_oe_0/i2]
  connect_bd_net -net prog_m_0_rs1 [get_bd_pins prog_m_0/rs1] [get_bd_pins reg_b_0/a2]
  connect_bd_net -net prog_m_0_rs2 [get_bd_pins gen_mux_0/a] [get_bd_pins prog_m_0/rs2] [get_bd_pins reg_b_0/a1]
  connect_bd_net -net reg_b_0_do1 [get_bd_pins data_m_1/di] [get_bd_pins gen_mux_1/b] [get_bd_pins reg_b_0/do1]
  connect_bd_net -net reg_b_0_do2 [get_bd_pins alu_0/a2] [get_bd_pins reg_b_0/do2]
  connect_bd_net -net sign_e_0_data_out [get_bd_pins gen_mux_1/a] [get_bd_pins sign_e_0/data_out]
  connect_bd_net -net sign_oe_0_sal [get_bd_pins mux_c_0/a] [get_bd_pins sign_oe_0/sal]
  connect_bd_net -net slicer_0_b [get_bd_ports out_test] [get_bd_pins mux_c_0/c] [get_bd_pins slicer_0/b]
  connect_bd_net -net sum_0_dout [get_bd_pins cont_0/din] [get_bd_pins sum_0/dout]
  connect_bd_net -net unidor_0_sal [get_bd_pins sign_e_0/data_in] [get_bd_pins unidor_0/sal]

  # Create address segments

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ActiveEmotionalView":"Default View",
   "Default View_ScaleFactor":"0.52362",
   "Default View_TopLeft":"67,94",
   "ExpandedHierarchyInLayout":"",
   "guistr":"# # String gsaved with Nlview 7.0r6  2020-01-29 bk=1.5227 VDI=41 GEI=36 GUI=JA:10.0 non-TLS
#  -string -flagsOSRD
preplace port port-id_sys_clk -pg 1 -lvl 0 -x -10 -y 240 -defaultsOSRD
preplace port port-id_out_test -pg 1 -lvl 11 -x 2750 -y 580 -defaultsOSRD
preplace inst alu_0 -pg 1 -lvl 10 -x 2590 -y 290 -defaultsOSRD
preplace inst cont_0 -pg 1 -lvl 2 -x 380 -y 480 -defaultsOSRD
preplace inst gen_mux_0 -pg 1 -lvl 6 -x 1500 -y 90 -defaultsOSRD
preplace inst mux_c_0 -pg 1 -lvl 2 -x 380 -y 620 -defaultsOSRD -orient R180
preplace inst gen_mux_1 -pg 1 -lvl 9 -x 2330 -y 150 -defaultsOSRD -resize 160 116
preplace inst data_m_1 -pg 1 -lvl 6 -x 1500 -y 380 -defaultsOSRD
preplace inst gen_mux_2 -pg 1 -lvl 7 -x 1760 -y 470 -defaultsOSRD -resize 160 116
preplace inst mux32_0 -pg 1 -lvl 5 -x 1220 -y 540 -defaultsOSRD
preplace inst CU_0 -pg 1 -lvl 4 -x 920 -y 400 -defaultsOSRD
preplace inst sign_oe_0 -pg 1 -lvl 3 -x 630 -y 190 -defaultsOSRD -orient R180
preplace inst slicer_0 -pg 1 -lvl 10 -x 2590 -y 560 -defaultsOSRD
preplace inst sum_0 -pg 1 -lvl 1 -x 130 -y 420 -defaultsOSRD -orient R180
preplace inst unidor_0 -pg 1 -lvl 7 -x 1760 -y 80 -defaultsOSRD
preplace inst prog_m_0 -pg 1 -lvl 3 -x 630 -y 410 -defaultsOSRD
preplace inst sign_e_0 -pg 1 -lvl 8 -x 2070 -y 80 -defaultsOSRD
preplace inst reg_b_0 -pg 1 -lvl 8 -x 2070 -y 280 -defaultsOSRD
preplace netloc CU_0_alu2reg 1 4 3 NJ 370 1330J 490 N
preplace netloc CU_0_alu_op 1 4 6 1070J 0 NJ 0 NJ 0 NJ 0 NJ 0 2440
preplace netloc CU_0_alu_scr 1 4 5 1090 180 NJ 180 1610J 160 NJ 160 2220J
preplace netloc CU_0_ci_en 1 2 3 NJ 600 NJ 600 1050
preplace netloc CU_0_imm_rd 1 4 2 1080 110 NJ
preplace netloc CU_0_men 1 4 1 1060 450n
preplace netloc CU_0_wem 1 4 2 NJ 390 N
preplace netloc CU_0_wer 1 4 4 1100 290 NJ 290 NJ 290 1870J
preplace netloc Net 1 0 8 N 240 250 260 NJ 260 NJ 260 NJ 260 1350 260 NJ 260 1880J
preplace netloc alu_0_alu_sal 1 4 7 1090 470 NJ 470 1620 390 NJ 390 NJ 390 2430 370 2720
preplace netloc cont_0_sal 1 1 2 NJ 410 490
preplace netloc data_m_1_dout 1 6 1 1610 380n
preplace netloc gen_mux_0_sal 1 6 1 N 90
preplace netloc gen_mux_1_sal 1 9 1 2430 150n
preplace netloc gen_mux_2_sal 1 7 1 1890 230n
preplace netloc mux32_0_sal 1 5 1 1340 370n
preplace netloc mux_c_0_sal 1 1 1 240 430n
preplace netloc prog_m_0_func3 1 3 1 N 420
preplace netloc prog_m_0_funct7 1 3 4 780 10 NJ 10 NJ 10 1610
preplace netloc prog_m_0_opcode 1 3 1 790 380n
preplace netloc prog_m_0_rd 1 3 5 770 170 NJ 170 1360 170 NJ 170 1900J
preplace netloc prog_m_0_rs1 1 3 5 760 270 NJ 270 NJ 270 NJ 270 NJ
preplace netloc prog_m_0_rs2 1 3 5 750 250 NJ 250 1350 250 NJ 250 NJ
preplace netloc reg_b_0_do1 1 5 4 1360 190 NJ 190 1910J 170 2210
preplace netloc reg_b_0_do2 1 8 2 NJ 290 N
preplace netloc sign_e_0_data_out 1 8 1 2210 80n
preplace netloc sign_oe_0_sal 1 2 1 500 190n
preplace netloc slicer_0_b 1 2 9 NJ 620 NJ 620 NJ 620 NJ 620 NJ 620 NJ 620 NJ 620 NJ 620 2720
preplace netloc sum_0_dout 1 0 2 10 490 NJ
preplace netloc unidor_0_sal 1 7 1 NJ 80
levelinfo -pg 1 -10 130 380 630 920 1220 1500 1760 2070 2330 2590 2750
pagesize -pg 1 -db -bbox -sgen -110 -20 2850 700
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_design_1()
cr_bd_design_1 ""
set_property REGISTERED_WITH_MANAGER "1" [get_files design_1.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files design_1.bd ] 

#call make_wrapper to create wrapper files
if { [get_property IS_LOCKED [ get_files -norecurse design_1.bd] ] == 1  } {
  import_files -fileset sources_1 [file normalize "${origin_dir}/rv32i_p/rv32i_p.gen/sources_1/bd/design_1/hdl/design_1_wrapper.vhd" ]
} else {
  set wrapper_path [make_wrapper -fileset sources_1 -files [ get_files -norecurse design_1.bd] -top]
  add_files -norecurse -fileset sources_1 $wrapper_path
}


set idrFlowPropertiesConstraints ""
catch {
 set idrFlowPropertiesConstraints [get_param runs.disableIDRFlowPropertyConstraints]
 set_param runs.disableIDRFlowPropertyConstraints 1
}

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7z020clg400-1 -flow {Vivado Synthesis 2022} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2022" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "incremental_checkpoint" -value "$proj_dir/rv32i_p.srcs/utils_1/imports/synth_1/design_1_wrapper.dcp" -objects $obj
set_property -name "auto_incremental_checkpoint" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7z020clg400-1 -flow {Vivado Implementation 2022} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2022" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]
catch {
 if { $idrFlowPropertiesConstraints != {} } {
   set_param runs.disableIDRFlowPropertyConstraints $idrFlowPropertiesConstraints
 }
}

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
